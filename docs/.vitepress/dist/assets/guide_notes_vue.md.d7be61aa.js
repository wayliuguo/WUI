import{_ as e,o as a,c as t,O as n}from"./chunks/framework.27bfc947.js";const C=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"guide/notes/vue.md"}'),s={name:"guide/notes/vue.md"},o=n(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><ul><li>主要记录一些内置函数及API</li></ul><h2 id="extractproptypes" tabindex="-1">ExtractPropTypes <a class="header-anchor" href="#extractproptypes" aria-label="Permalink to &quot;ExtractPropTypes&quot;">​</a></h2><p><code>ExtractPropTypes</code> 是 <code>Vue</code> 内置的函数，用于从组件属性的定义对象中提取出 <code>Props</code> 类型。<a href="./loading.html#props">Loading 的 ExtractPropTypes</a></p><h2 id="cssproperties" tabindex="-1">CSSProperties <a class="header-anchor" href="#cssproperties" aria-label="Permalink to &quot;CSSProperties&quot;">​</a></h2><p>用于扩展在样式属性绑定上允许的值的类型。<a href="./badge.html#style-computed">Badge 的 CSSProperties</a></p><h2 id="computedref" tabindex="-1">ComputedRef <a class="header-anchor" href="#computedref" aria-label="Permalink to &quot;ComputedRef&quot;">​</a></h2><p>响应式对象函数类型<a href="./row.html#row-key">用法</a></p><h2 id="injectionkey-provide" tabindex="-1">InjectionKey &amp;&amp; provide <a class="header-anchor" href="#injectionkey-provide" aria-label="Permalink to &quot;InjectionKey &amp;&amp; provide&quot;">​</a></h2><p>InjectionKey 类型是一个用于创建注入键（也称为依赖项注入）的工具，它可以确保提供和注入的对象类型相匹配。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export interface TreeContext {</span></span>
<span class="line"><span style="color:#A6ACCD;">  slots: SetupContext[&#39;slots&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">  // emit: SetupContext&lt;typeof treeEmitts&gt;[&#39;emit&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 此变量作为提供出去的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">export const treeInjectKey: InjectionKey&lt;TreeContext&gt; = Symbol()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">provide(treeInjectKey, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  slots: useSlots()</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><h2 id="componentinternalinstance" tabindex="-1">ComponentInternalInstance <a class="header-anchor" href="#componentinternalinstance" aria-label="Permalink to &quot;ComponentInternalInstance&quot;">​</a></h2><p>其是一个内部类型，用于表示组件实例。</p>`,13),p=[o];function r(l,c,i,d,h,u){return a(),t("div",null,p)}const y=e(s,[["render",r]]);export{C as __pageData,y as default};
