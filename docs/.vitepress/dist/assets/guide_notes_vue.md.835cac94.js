import{_ as a,o as e,c as s,O as n}from"./chunks/framework.4015372c.js";const A=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"guide/notes/vue.md"}'),t={name:"guide/notes/vue.md"},o=n(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><ul><li>主要记录一些内置函数及API</li></ul><h2 id="extractproptypes" tabindex="-1">ExtractPropTypes <a class="header-anchor" href="#extractproptypes" aria-label="Permalink to &quot;ExtractPropTypes&quot;">​</a></h2><p><code>ExtractPropTypes</code> 是 <code>Vue</code> 内置的函数，用于从组件属性的定义对象中提取出 <code>Props</code> 类型。<a href="./loading.html#props">Loading 的 ExtractPropTypes</a></p><h2 id="cssproperties" tabindex="-1">CSSProperties <a class="header-anchor" href="#cssproperties" aria-label="Permalink to &quot;CSSProperties&quot;">​</a></h2><p>用于扩展在样式属性绑定上允许的值的类型。<a href="./badge.html#style-computed">Badge 的 CSSProperties</a></p><h2 id="computedref" tabindex="-1">ComputedRef <a class="header-anchor" href="#computedref" aria-label="Permalink to &quot;ComputedRef&quot;">​</a></h2><p>响应式对象函数类型<a href="./row.html#row-key">用法</a></p><h2 id="injectionkey-provide" tabindex="-1">InjectionKey &amp;&amp; provide <a class="header-anchor" href="#injectionkey-provide" aria-label="Permalink to &quot;InjectionKey &amp;&amp; provide&quot;">​</a></h2><p>InjectionKey 类型是一个用于创建注入键（也称为依赖项注入）的工具，它可以确保提供和注入的对象类型相匹配。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export interface TreeContext {</span></span>
<span class="line"><span style="color:#A6ACCD;">  slots: SetupContext[&#39;slots&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">  // emit: SetupContext&lt;typeof treeEmitts&gt;[&#39;emit&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 此变量作为提供出去的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">export const treeInjectKey: InjectionKey&lt;TreeContext&gt; = Symbol()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">provide(treeInjectKey, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  slots: useSlots()</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><h2 id="componentinternalinstance" tabindex="-1">ComponentInternalInstance <a class="header-anchor" href="#componentinternalinstance" aria-label="Permalink to &quot;ComponentInternalInstance&quot;">​</a></h2><p>其是一个内部类型，用于表示组件实例。</p><h2 id="expose" tabindex="-1">expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;expose&quot;">​</a></h2><ul><li>可以暴露组件内部的数据或方法</li><li>不可以暴露<code>props</code></li><li><a href="./hooks.html#use-expose-ts">expose hooks</a></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// expose</span></span>
<span class="line"><span style="color:#A6ACCD;">setup(props, {expose}) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: &#39;w-checkbox&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  const toggle = () =&gt; {}</span></span>
<span class="line"><span style="color:#A6ACCD;">  expose({toggle})</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用</span></span>
<span class="line"><span style="color:#A6ACCD;">const checkboxRef = ref()</span></span>
<span class="line"><span style="color:#A6ACCD;">const toggle = () =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  checkboxRef.value.toggle()</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;w-checkbox ref=&quot;checkboxRef&quot; v-model=&quot;checked&quot;&gt;复选框&lt;/w-checkbox&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;w-button @click=&quot;toggle&quot;&gt;toggle&lt;/w-button&gt;</span></span></code></pre></div><h2 id="getcurrentinstance" tabindex="-1">getCurrentInstance <a class="header-anchor" href="#getcurrentinstance" aria-label="Permalink to &quot;getCurrentInstance&quot;">​</a></h2><ul><li>用于获取当前组件实例，可以在组件的任何地方调用。</li><li>返回一个组件实例对象，包含了当前组件实例的所有属性和方法。</li></ul><h2 id="watchsource" tabindex="-1">WatchSource <a class="header-anchor" href="#watchsource" aria-label="Permalink to &quot;WatchSource&quot;">​</a></h2><ul><li>是一个泛型接口，用于表示可以作为监视器的值的类型。</li></ul><h2 id="createapp" tabindex="-1">createApp <a class="header-anchor" href="#createapp" aria-label="Permalink to &quot;createApp&quot;">​</a></h2><ul><li>创建一个应用实例。</li><li>第一个参数是根组件。第二个参数可选，它是要传递给根组件的 props。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function createApp(rootComponent: Component, rootProps?: object): App</span></span></code></pre></div><h2 id="app-mount" tabindex="-1">app.mount <a class="header-anchor" href="#app-mount" aria-label="Permalink to &quot;app.mount&quot;">​</a></h2><ul><li>将应用实例挂载在一个容器元素中。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">interface App {</span></span>
<span class="line"><span style="color:#A6ACCD;">  mount(rootContainer: Element | string): ComponentPublicInstance</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="app-unmount" tabindex="-1">app.unmount <a class="header-anchor" href="#app-unmount" aria-label="Permalink to &quot;app.unmount&quot;">​</a></h2><ul><li>卸载一个已挂载的应用实例。卸载一个应用会触发该应用组件树内所有组件的卸载生命周期钩子。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">interface App {</span></span>
<span class="line"><span style="color:#A6ACCD;">  unmount(): void</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div>`,29),l=[o];function p(c,r,i,u,h,d){return e(),s("div",null,l)}const m=a(t,[["render",p]]);export{A as __pageData,m as default};
